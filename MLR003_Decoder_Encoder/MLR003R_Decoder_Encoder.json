[
    {
        "id": "4a78674aaf0fa47e",
        "type": "tab",
        "label": "MLR003R Decoder Encoder",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "29abbd2c1081592a",
        "type": "mqtt in",
        "z": "4a78674aaf0fa47e",
        "name": "MQTT IN",
        "topic": "lora/+/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "8d4713743ff194fd"
            ]
        ]
    },
    {
        "id": "8d4713743ff194fd",
        "type": "function",
        "z": "4a78674aaf0fa47e",
        "name": "MLR003 Uplink Decoder from MQTT Packet",
        "func": "// Constants for bit masks and repeated values\nconst MASK_BIT_1 = 0x01;\nconst MASK_BIT_2 = 0x02;\nconst MASK_BIT_3 = 0x04;\nconst MASK_BIT_4 = 0x08;\nconst MASK_BIT_5 = 0x10;\nconst MASK_BIT_6 = 0x20;\nconst MASK_BIT_7 = 0x40;\nconst MASK_BIT_8 = 0x80;\n\n// Constants for specific values\nconst INVALID_VALUE = \"Invalid\";\nconst INVALID_MOTOR_RANGE = \"Invalid Motor Range\";\nconst INVALID_SPREADING_FACTOR = \"Invalid SF\";\nconst INVALID_STATUS = \"Invalid Status\";\nconst INVALID_ACTION = \"Invalid action\";\n\n// Constants for specific output strings\nconst SLOW_HARVESTING_OFF = \"Slow Harvesting switched OFF in Downlink\";\nconst NO_SLOW_HARVESTING_RECENT_TARGET = \"No Slow Harvesting.Recent Target % not equal to 0\";\nconst HOT_WATER_OFF = \"Hot Water expected to be OFF\";\nconst CANNOT_DETECT_OPENING_POINT = \"Cannot detect opening Point\";\nconst NO_SLOW_HARVESTING_BATTERY_HIGH = \"No Slow Harvesting. Battery High\";\nconst NO_SLOW_HARVESTING_INSUFFICIENT_CURRENT = \"No Slow Harvesting. Insufficient harvesting current\";\nconst DETECTING_OPENING_POINT = \"Detecting Opening Point\";\nconst SLOW_HARVESTING = \"Slow Harvesting\";\nconst NO_ACTION = \"No Action\";\nconst CLOSE_30_MIN = \"Close to 0% for 30 minutes and resume normal operation\";\nconst CLOSE_60_MIN = \"Close to 0% for 60 minutes and resume normal operation\";\nconst WILL_BEEP = \"Device will beep upon resuming normal operation\";\nconst WILL_NOT_BEEP = \"Device will not beep upon resuming normal operation\";\nconst ONE_TEMP_DROP = \"One temperature drop\";\nconst TWO_TEMP_DROPS = \"Two consecutive temperature drops\";\nconst NO_DETECTION = \"No Detection\";\nconst DETECTED = \"Detected. Ambient Raw dropped by >=1.5Â°C during last 10 minutes\";\nconst NO_EXPIRY = \"No Expiry\";\nconst DEVICE_WILL_SWITCH_OFF = \"If a 6-week Reference Run fails, device will switch off\";\nconst DEVICE_WILL_STAY_ON = \"Device will stay on regardless of 6-week Reference Run results\";\nconst RECALIBRATION_DONE = \"A Recalibration was done, based on the recent FPORT 15 Downlink\";\nconst RECALIBRATION_NOT_DONE = \"Device is not performing a recalibration\";\nconst DEVICE_WILL_TURN_OFF = \"Device will move to mounting position and switch OFF\";\nconst DEVICE_WILL_OPERATE = \"Device is under normal operation\";\n\n\n// Helper function for bit extraction\nfunction getBit(byte, position) {\n  return (byte >> position) & MASK_BIT_1;\n}\n\nfunction get_user_mode(input) {\n  var user_mode = input[9] & 0x7;\n  switch (user_mode) {\n    case 0:\n      return \"Valve_Position\";\n    case 1:\n      return \"RESERVED\";\n    case 2:\n      return \"SP_Ambient_Temperature\";\n    case 3:\n      return \"Detecting_Opening_Point\";\n    case 4:\n      return \"Slow_Harvesting\";\n    case 5:\n      return \"Temperature_Drop\";\n    case 6:\n      return \"Freeze_Protect\";\n    case 7:\n      return \"Forced_Heating\";\n    default:\n      return \"Unknown Operating Mode\";\n  }\n}\n\nfunction get_user_value(input) {\n  var user_mode = get_user_mode(input);\n  switch (user_mode) {\n    case \"Valve_Position\":\n    case \"Freeze_Protect\":\n    case \"Forced_Heating\":\n      return input[10];\n    case \"SP_Ambient_Temperature\":\n      return input[10] * 0.5;\n    case \"Detecting_Opening_Point\":\n    case \"Slow_Harvesting\":\n      return input[10] * 0.25;\n    default:\n      return \"Invalid User Mode\";\n  }\n}\n\nfunction decode_port_1(input) {\n  var output = {\n    Current_Valve_Position: input[0],\n    Flow_Sensor_Raw: input[1] * 0.5,\n    Flow_Temperature: input[2] * 0.5,\n    Ambient_Sensor_Raw: input[3] * 0.25,\n    Ambient_Temperature: input[4] * 0.25,\n    Temperature_Drop_Detection: input[5] >> 7 & 0x01,\n    Energy_Storage: input[5] >> 6 & 0x01,\n    Harvesting_Active: input[5] >> 5 & 0x01,\n    Ambient_Sensor_Failure: input[5] >> 4 & 0x01,\n    Flow_Sensor_Failure: input[5] >> 3 & 0x01,\n    Radio_Communication_Error: input[5] >> 2 & 0x01,\n    Received_Signal_Strength: input[5] >> 1 & 0x01,\n    Motor_Error: input[5] >> 0 & 0x01,\n    Storage_Voltage: Number((input[6] * 0.02).toFixed(2)),\n    Average_Current_Consumed: input[7] * 10,\n    Average_Current_Generated: input[8] * 10,\n    Operating_Condition: input[9] >> 7 & 0x01,\n    Storage_Fully_Charged: input[9] >> 6 & 0x01,\n    Zero_Error: input[9] >> 5 & 0x01,\n    Calibration_OK: input[9] >> 4 & 0x01,\n  }\n  output.User_Mode = get_user_mode(input);\n  output.User_Value = get_user_value(input);\n\n  if (input.length == 12) {\n    var utmp = input[11] * 0.25;\n    output.Used_Temperature = utmp;\n  }\n  return output;\n}\n\n\nfunction decode_port_2(input) {\n  var output = {};\n  {\n    var REV_Major = (input[0] & 0xF).toString();\n    var REV_Minor = ((input[0] >> 4) & 0xF).toString(16);\n    output.REV = REV_Major + \".\" + REV_Minor;\n  }\n  {\n    var HW_Major = (input[1] & 0xF).toString();\n    var HW_Minor = ((input[1] >> 4) & 0xF).toString();\n    output.HW = HW_Major + \".\" + HW_Minor;\n  }\n  {\n    var FW_Year = input[2].toString();\n    var FW_Month = input[3].toString();\n    var FW_Day = input[4].toString();\n    var FW_Minor = input[5].toString();\n    output.FW = \"20\" + FW_Year + \".\" + FW_Month + \".\" + FW_Day + \".\" + FW_Minor;\n  }\n  return output;\n}\n\nfunction decode_port_3(input) {\n  var output = {};\n  switch (input[0]) {\n    case 0:\n      output.motor_range = 2.56048;\n      break;\n    case 3:\n      output.motor_range = 0.624;\n      break;\n    case 4:\n      output.motor_range = 0.832;\n      break;\n    case 5:\n      output.motor_range = 1.040;\n      break;\n    case 6:\n      output.motor_range = 1.248;\n      break;\n    case 7:\n      output.motor_range = 1.456;\n      break;\n    case 8:\n      output.motor_range = 1.664;\n      break;\n    case 9:\n      output.motor_range = 1.872;\n      break;\n    case 10:\n      output.motor_range = 2.080;\n      break;\n    case 11:\n      output.motor_range = 2.288;\n      break;\n    case 12:\n      output.motor_range = 2.496;\n      break;\n    default:\n      output.motor_range = 0;\n      break;\n  }\n  return output;\n}\n\nfunction decode_port_4(bytes) {\n  const output = {};\n  switch (bytes[0]) {\n    case 0: output.SpreadingFactor = \"SF7\"; break;\n    case 1: output.SpreadingFactor = \"SF8\"; break;\n    default: output.SpreadingFactor = INVALID_SPREADING_FACTOR; break;\n  }\n  return output;\n}\n\nfunction decode_port_5(bytes) {\n  const output = {};\n  output.Opening_Percent_Found = getBit(bytes[0], 7);\n  output.Opening_Percent_Value = bytes[0] & 0x7F;\n  const status = bytes[1] & 0x07;\n  switch (status) {\n    case 0: output.status = SLOW_HARVESTING_OFF; break;\n    case 1: output.status = NO_SLOW_HARVESTING_RECENT_TARGET; break;\n    case 2: output.status = HOT_WATER_OFF; break;\n    case 3: output.status = CANNOT_DETECT_OPENING_POINT; break;\n    case 4: output.status = NO_SLOW_HARVESTING_BATTERY_HIGH; break;\n    case 5: output.status = NO_SLOW_HARVESTING_INSUFFICIENT_CURRENT; break;\n    case 6: output.status = DETECTING_OPENING_POINT; break;\n    case 7: output.status = SLOW_HARVESTING; break;\n    default: output.status = INVALID_STATUS; break;\n  }\n  return output;\n}\n\nfunction decode_port_6(bytes) {\n  const output = {};\n  const action = (bytes[0] >> 6) & 0x03;\n  switch (action) {\n    case 0: output.action = NO_ACTION; break;\n    case 2: output.action = CLOSE_30_MIN; break;\n    case 3: output.action = CLOSE_60_MIN; break;\n    default: output.action = INVALID_ACTION; break;\n  }\n\n  const beep_bit = getBit(bytes[0], 5);\n  output.beep = beep_bit ? WILL_BEEP : WILL_NOT_BEEP;\n\n  const drop_period_bit = getBit(bytes[0], 4);\n  output.drop_period = drop_period_bit ? TWO_TEMP_DROPS : ONE_TEMP_DROP;\n\n  const temperature_drop_detected_bit = getBit(bytes[0], 0);\n  output.temperature_drop_detected = temperature_drop_detected_bit ? DETECTED : NO_DETECTION;\n\n  return output;\n}\n\nfunction decode_port_7(bytes) {\n  const output = {};\n  output.P_Coefficient = bytes[0];\n  output.I_Coefficient = (bytes[1] * 0.02);\n  output.D_Coefficient = (bytes[2] * 0.2);\n  output.Closed_Percent = bytes[4];\n  output.D_Coefficient_when_closed = (bytes[5] * 0.2);\n  output.Offset_Percent = bytes[6];\n  return output;\n}\n\nfunction decode_port_8(bytes) {\n  const output = {};\n  let index = bytes[0];\n  if (index >= 128) index -= 256;\n  output.flow_offset = index * 0.25;\n  return output;\n}\n\nfunction decode_port_9(bytes) {\n  const output = {};\n  const expiry = bytes[0];\n  output.external_temperature_sensor_expiry_in_minutes = expiry === 0 ? NO_EXPIRY : expiry * 5;\n  let temperature_use_bit = bytes[1];\n  if (temperature_use_bit === 0) {\n    output.source_of_room_temperature_for_control = \"Internal Temperature Estimate\";\n  }\n  else if (temperature_use_bit === 1) {\n    output.source_of_room_temperature_for_control = \"External Temperature Sensor\";\n  }\n  return output;\n}\n\nfunction decode_port_15(bytes) {\n  const output = {};\n  const device_on_bit = getBit(bytes[0], 7);\n  output.device_on = device_on_bit ? DEVICE_WILL_STAY_ON : DEVICE_WILL_SWITCH_OFF;\n  const recalibration_bit = getBit(bytes[0], 6);\n  output.recailbration_status = recalibration_bit ? RECALIBRATION_DONE : RECALIBRATION_NOT_DONE;\n  const operating_status_bit = getBit(bytes[0], 0);\n  output.operating_status = operating_status_bit ? DEVICE_WILL_TURN_OFF : DEVICE_WILL_OPERATE;\n  return output;\n}\n\nfunction Decode(fPort, bytes) {\n  var output = {};\n  switch (fPort) {\n    case 1:\n      output = decode_port_1(bytes);\n      break;\n    case 2:\n      output = decode_port_2(bytes);\n      break;\n    case 3:\n      output = decode_port_3(bytes);\n      break;\n    case 4:\n      output = decode_port_4(bytes);\n      break;\n    case 5:\n      output = decode_port_5(bytes);\n      break;\n    case 6:\n      output = decode_port_6(bytes);\n      break;\n    case 7:\n      output = decode_port_7(bytes);\n      break;\n    case 8:\n      output = decode_port_8(bytes);\n      break;\n    case 9:\n      output = decode_port_9(bytes);\n      break;\n    case 15:\n      output = decode_port_15(bytes);\n      break;\n    default:\n      return {\n        errors: ['unknown FPort'],\n      };\n  }\n  return output;\n}\n\nfunction hexToBytes(hex) {\n    for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n    return bytes;\n}\n\n/*\nConvert Incoming Message to JSON and extract base64 Payload\n*/\nmsg = JSON.parse(msg.payload);\nvar b64_payload = msg.data;\nvar fport = msg.port;\n\n/*\nConvert base64 payload to Hex String\n*/\nconst buffer = Buffer.from(b64_payload, 'base64');\nconst hex_payload_str = buffer.toString('hex');\n\n/*\nConvert Hex String to bytes and call the Decoder function\n*/\nvar hex_payload = hexToBytes(hex_payload_str);\nvar output = Decode(fport,hex_payload);\n\nmsg.payload = output;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "3330916da9f7aba7"
            ]
        ]
    },
    {
        "id": "3330916da9f7aba7",
        "type": "debug",
        "z": "4a78674aaf0fa47e",
        "name": "Uplink",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 160,
        "wires": []
    },
    {
        "id": "e676ac93271c9c08",
        "type": "mqtt out",
        "z": "4a78674aaf0fa47e",
        "name": "MQTT OUT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "",
        "x": 1130,
        "y": 340,
        "wires": []
    },
    {
        "id": "8afd45ce62f6a083",
        "type": "function",
        "z": "4a78674aaf0fa47e",
        "name": "MLR003 Downlink Encoder",
        "func": "function encode_port_1(input) {\n  let mode = input.userMode; // \"Ambient_Temperature\" or \"Valve_Position\"\n  let safetyMode = input.safetyMode; // \"Ambient_Temperature\" or \"Valve_Position\"\n  let setValue = input.setValue; // 0-40 for Ambient_Temperature, 0-100 for Valve_Position\n  let roomTemperature = input.roomTemperature; // 0-40\n  let safetyValue = input.safetyValue; // 0-40 for Ambient_Temperature, 0-100 for Valve_Position\n  let radioInterval = input.radioInterval; // 5, 10, 60, 120, 480\n  let doReferenceRunNow = input.doReferenceRunNow; // 0 or 1\n\n  let bytes = [0, 0, 0, 0, 0, 0];\n\n  // Byte 1: Set value\n  if (mode === \"Ambient_Temperature\") {\n    if (setValue < 0 || setValue > 40) {\n      throw new Error(\"Set value out of range for ambient mode\");\n    }\n    else {\n      bytes[0] = setValue * 2;\n    }\n  } else if (mode === \"Valve_Position\") {\n    if (setValue < 0 || setValue > 100) {\n      throw new Error(\"Set value out of range for valve mode\");\n    }\n    else {\n      bytes[0] = setValue;\n    }\n  } else {\n    throw new Error(\"Invalid user mode\");\n  }\n\n  // Byte 2: Room temperature (0-40)\n  if (roomTemperature < 0 || roomTemperature > 40) {\n    throw new Error(\"Room temperature out of range\");\n  }\n  else {\n    bytes[1] = roomTemperature * 4;\n  }\n\n  // Byte 3: Safety value\n  if (safetyMode === \"Ambient_Temperature\") {\n    if (safetyValue < 0 || safetyValue > 40) {\n      throw new Error(\"Safety value out of range for ambient mode\");\n    }\n    else {\n      bytes[2] = safetyValue * 2;\n    }\n  } else if (safetyMode === \"Valve_Position\") {\n    if (safetyValue < 0 || safetyValue > 100) {\n      throw new Error(\"Safety value out of range for valve mode\");\n    }\n    else {\n      bytes[2] = safetyValue;\n    }\n  } else {\n    throw new Error(\"Invalid safety mode\");\n  }\n\n  // Byte 4: Radio interval, user mode, safety mode\n  let radioBits;\n  switch (radioInterval) {\n    case 5:\n      radioBits = 1 << 4; // Radio interval 5 minutes\n      break;\n    case 10:\n      radioBits = 0 << 4; // Radio interval 10 minutes\n      break;\n    case 60:\n      radioBits = 2 << 4; // Radio interval 60 minutes\n      break;\n    case 120:\n      radioBits = 3 << 4; // Radio interval 120 minutes\n      break;\n    case 480:\n      radioBits = 4 << 4; // Radio interval 480 minutes\n      break;\n    default:\n      throw new Error(\"Invalid radio interval\");\n  }\n\n  let userModeBits;\n  if (mode === \"Ambient_Temperature\") {\n    userModeBits = 2 << 2; // User mode \"Ambient_Temperature\" in bits 3 and 4\n  } else {\n    userModeBits = 0 << 2; // User mode \"Valve_Position\" in bits 3 and 4\n  }\n\n  let safetyModeBits;\n  if (safetyMode === \"Ambient_Temperature\") {\n    safetyModeBits = 0 << 0; // Safety mode \"Ambient_Temperature\" in bits 1 and 2\n  } else {\n    safetyModeBits = 2 << 0; // Safety mode \"Valve_Position\" in bits 1 and 2\n  }\n\n  bytes[3] = radioBits | userModeBits | safetyModeBits;\n\n  // Byte 5: Reserved (set to 0)\n  bytes[4] = 0;\n\n  // Byte 6: doReferenceRunNow bit (bit 8)\n  if (doReferenceRunNow < 0 || doReferenceRunNow > 1) {\n    throw new Error(\"Invalid doReferenceRunNow value\");\n  }\n  else {\n    bytes[5] = doReferenceRunNow << 7;\n  }\n\n  return bytes;\n}\n\nfunction encode_port_2() {\n  return [];\n}\n\nfunction encode_port_3(input) {\n  let bytes = [0];\n\n  let range = input.motor_operating_range;\n\n  switch (range) {\n    case \"2.56048\":\n      bytes[0] = 0;\n      break;\n    case \"0.624\":\n      bytes[0] = 3;\n      break;\n    case \"0.832\":\n      bytes[0] = 4;\n      break;\n    case \"1.040\":\n      bytes[0] = 5;\n      break;\n    case \"1.248\":\n      bytes[0] = 6;\n      break;\n    case \"1.456\":\n      bytes[0] = 7;\n      break;\n    case \"1.664\":\n      bytes[0] = 8;\n      break;\n    case \"1.872\":\n      bytes[0] = 9;\n      break;\n    case \"2.080\":\n      bytes[0] = 10;\n      break;\n    case \"2.288\":\n      bytes[0] = 11;\n      break;\n    case \"2.496\":\n      bytes[0] = 12;\n      break;\n    default:\n      throw new Error(\"Invalid Motor Operating Range\");\n  }\n  return bytes;\n}\n\nfunction encode_port_4(input) {\n  let bytes = [0];\n\n  let sf = input.spreading_factor;\n\n  switch (sf) {\n    case \"SF7\":\n      bytes[0] = 0;\n      break;\n    case \"SF8\":\n      bytes[0] = 1;\n      break;\n    default:\n      throw new Error(\"Invalid Spreading Factor\");\n  }\n  return bytes;\n}\n\nfunction encode_port_5(input) {\n  let bytes = [0, 0];\n\n  let opening_point_reset = input.opening_point_reset;\n  let hot_water_availability = input.hot_water_availability;\n  let slow_harvesting = input.slow_harvesting;\n  let max_flow_sensor_raw = input.max_flow_sensor_raw;\n\n  let opening_point_reset_bit;\n  if (opening_point_reset === true) {\n    opening_point_reset_bit = 1 << 4;\n  }\n  else {\n    opening_point_reset_bit = 0 << 4;\n  }\n\n  let hot_water_availability_bit;\n  switch (hot_water_availability) {\n    case \"Use_time_of_year\":\n      hot_water_availability_bit = 0 << 2;\n      break;\n    case \"OFF\":\n      hot_water_availability_bit = 1 << 2;\n      break;\n    case \"ON\":\n      hot_water_availability_bit = 2 << 2;\n      break;\n    default:\n      throw new Error(\"Invalid Hot Water availabiliy\");\n  }\n\n  let slow_harvesting_bit;\n  switch (slow_harvesting) {\n    case \"DEFAULT\":\n      slow_harvesting_bit = 0 << 0;\n      break;\n    case \"DO_OPD_AND_SH\":\n      slow_harvesting_bit = 1 << 0;\n      break;\n    case \"DO_OPD_ONLY\":\n      slow_harvesting_bit = 2 << 0;\n      break;\n    case \"DISABLE_OPD_AND_SH\":\n      slow_harvesting_bit = 3 << 0;\n      break;\n    default:\n      throw new Error(\"Invalid Slow Harvesting Mode\");\n  }\n\n  bytes[0] = opening_point_reset_bit | hot_water_availability_bit | slow_harvesting_bit;\n\n  if (max_flow_sensor_raw < 0 || max_flow_sensor_raw > 33) {\n    throw new Error(\"Maximum Flow Sensor Raw value out of range\");\n  }\n  else {\n    bytes[1] = (max_flow_sensor_raw * 2);\n  }\n\n  return bytes;\n}\n\nfunction encode_port_6(input) {\n  let bytes = [0];\n\n  let tdd_action = input.tdd_action;\n  let tdd_beep = input.tdd_beep;\n  let tdd_period = input.tdd_period;\n\n  let tdd_action_bit;\n  switch (tdd_action) {\n    case \"No_Action\":\n      tdd_action_bit = 0 << 6;\n      break;\n    case \"Close_to_0%_for_30_minutes\":\n      tdd_action_bit = 2 << 6;\n      break;\n    case \"Close_to_0%_for_60_minutes\":\n      tdd_action_bit = 3 << 6;\n      break;\n    default:\n      throw new Error(\"Invalid Action\");\n  }\n\n  let tdd_beep_bit;\n  if (tdd_beep === true) {\n    tdd_beep_bit = 1 << 5;\n  }\n  else {\n    tdd_beep_bit = 0 << 5;\n  }\n\n  let tdd_period_bit;\n  switch (tdd_period) {\n    case 1:\n      tdd_period_bit = 0 << 4;\n      break;\n    case 2:\n      tdd_period_bit = 1 << 4;\n      break;\n    default:\n      throw new Error(\"Invalid Period\")\n  }\n\n  bytes[0] = tdd_action_bit | tdd_beep_bit | tdd_period_bit;\n\n  return bytes;\n}\n\nfunction encode_port_7(input) {\n  let bytes = [0, 0, 0, 0, 0, 0, 0];\n\n  let kP = input.kP;\n  let kI = input.kI;\n  let kD = input.kD;\n  let cp = input.Closed_Percent;\n  let kD_zero = input.kD_when_closed;\n  let ofp = input.Offset_Percent;\n\n  if (kP >= 0 && kP <= 255) {\n    bytes[0] = kP;\n  }\n  else {\n    throw new Error(\"Invalid kP value\");\n  }\n\n  if (kI >= 0 && kI <= 5.10) {\n    bytes[1] = Math.round(kI / 0.02);\n  }\n  else {\n    throw new Error(\"Invalid kI value\");\n  }\n\n  if (kD >= 0 && kD <= 51) {\n    bytes[2] = Math.round(kD / 0.2);\n  }\n  else {\n    throw new Error(\"Invalid kD value\");\n  }\n\n  bytes[3] = 1 << 7;\n\n  if (cp >= 0 && cp <= 100) {\n    bytes[4] = cp;\n  }\n  else {\n    throw new Error(\"Invalid Closed_Percent value\");\n  }\n\n  if (kD_zero >= 0 && kD_zero <= 51) {\n    bytes[5] = Math.round(kD_zero / 0.2);\n  }\n  else {\n    throw new Error(\"Invalid kD_when_closed value\");\n  }\n\n  if (ofp >= 0 && ofp <= 100) {\n    bytes[6] = ofp;\n  }\n  else {\n    throw new Error(\"Invalid Offset_Percent value\");\n  }\n\n  return bytes;\n}\n\nfunction encode_port_8(input) {\n  let bytes = [0];\n\n  let frv_offset = input.Flow_Raw_Value_Offset;\n\n  if (frv_offset >= 0 && frv_offset <= 31.75) {\n    bytes[0] = Math.round(frv_offset * 4)\n  }\n  else if (frv_offset >= -32 && frv_offset < 0) {\n    bytes[0] = (Math.round((frv_offset + 32) * 4) + 0x80);\n  }\n  else {\n    throw new Error('Flow_Raw_Value_Offset out of range. Must be between -32.00 and 31.75');\n  }\n\n  return bytes;\n}\n\nfunction encode_port_9(input) {\n  let bytes = [0];\n\n  let external_sensor_expiry = input.External_temperature_sensor_expiry_minutes;\n\n  if (external_sensor_expiry >= 0 && external_sensor_expiry <= 1275) {\n    bytes[0] = Math.round(external_sensor_expiry / 5);\n  }\n  else {\n    throw new Error(\"Invalid Temperature Sensor expiry time\");\n  }\n\n  return bytes;\n}\n\nfunction encode_port_10(input) {\n  let bytes = [0];\n\n  let room_temperature = input.Room_Temperature;\n\n  if (room_temperature >= 0 && room_temperature <= 40) {\n    bytes[0] = (room_temperature * 4);\n  }\n  else {\n    throw new Error('Room_Temperature out of range. Must be between 0 and 40');\n  }\n  return bytes;\n}\n\nfunction encode_port_11(input) {\n  let bytes = [0];\n\n  let beeps = input.Beep;\n\n  if (beeps >= 0 && beeps <= 255) {\n    bytes[0] = beeps;\n  }\n  else {\n    throw new Error('Beep count out of range');\n  }\n  return bytes;\n}\n\nfunction encode_port_15(input) {\n  let bytes = [0];\n\n  let on = input.device_will_operate_if_6_week_reference_run_fails;\n  let rec = input.do_recalibation_now;\n  let off = input.turn_off_device;\n\n  let on_bit;\n  if (on === true) {\n    on_bit = 1 << 7;\n  }\n  else {\n    on_bit = 0 << 7;\n  }\n\n  let rec_bit;\n  if (rec === true) {\n    rec_bit = 1 << 6;\n  }\n  else {\n    rec_bit = 0 << 6;\n  }\n\n  let off_bit;\n  if (off === true) {\n    off_bit = 1 << 0;\n  }\n  else {\n    off_bit = 0 << 0;\n  }\n\n  bytes[0] = on_bit | rec_bit | off_bit;\n\n  return bytes;\n}\n\n// Encode downlink function.\n//\n// Input is an object with the following fields:\n// - output = Object representing the payload that must be encoded.\n// - variables = Object containing the configured device variables.\n//\n// Output must be an object with the following fields:\n// - bytes = Byte array containing the downlink payload.\nfunction encodeDownlink(input) {\n  let port = Number(input.fPort);\n  var downlink;\n  switch (port) {\n    case 1:\n      downlink = encode_port_1(input);\n      break;\n    case 2:\n      downlink = encode_port_2();\n      break;\n    case 3:\n      downlink = encode_port_3(input);\n      break;\n    case 4:\n      downlink = encode_port_4(input);\n      break;\n    case 5:\n      downlink = encode_port_5(input);\n      break;\n    case 6:\n      downlink = encode_port_6(input);\n      break;\n    case 7:\n      downlink = encode_port_7(input);\n      break;\n    case 8:\n      downlink = encode_port_8(input);\n      break;\n    case 9:\n      downlink = encode_port_9(input);\n      break;\n    case 10:\n      downlink = encode_port_10(input);\n      break;\n    case 11:\n      downlink = encode_port_11(input);\n      break;\n    case 15:\n      downlink = encode_port_15(input);\n      break;\n    default:\n      return {\n        errors: ['unknown FPort'],\n      };\n  }\n  \n  return {\n    bytes: Buffer.from(downlink),\n    fPort: input.fPort\n  };\n}\n\n\nmsg.payload = encodeDownlink(msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "b57992349f58e448"
            ]
        ]
    },
    {
        "id": "30fe8a91713d816c",
        "type": "debug",
        "z": "4a78674aaf0fa47e",
        "name": "Downlink",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 400,
        "wires": []
    },
    {
        "id": "b57992349f58e448",
        "type": "base64",
        "z": "4a78674aaf0fa47e",
        "name": "",
        "action": "",
        "property": "payload.bytes",
        "x": 620,
        "y": 340,
        "wires": [
            [
                "d1c5cb831c66ad0b"
            ]
        ]
    },
    {
        "id": "aa0b17e6c9e10fcc",
        "type": "comment",
        "z": "4a78674aaf0fa47e",
        "name": "Make sure to set the MQTT settings correspondingly in the MQTT IN and OUT Node",
        "info": "",
        "x": 330,
        "y": 60,
        "wires": []
    },
    {
        "id": "5d1480c169437b36",
        "type": "comment",
        "z": "4a78674aaf0fa47e",
        "name": "Fill in the MQTT topic as required",
        "info": "",
        "x": 170,
        "y": 100,
        "wires": []
    },
    {
        "id": "da35756418c4d2c6",
        "type": "comment",
        "z": "4a78674aaf0fa47e",
        "name": "Install \"base64\" node",
        "info": "",
        "x": 140,
        "y": 20,
        "wires": []
    },
    {
        "id": "df88e13d4fa82ab6",
        "type": "inject",
        "z": "4a78674aaf0fa47e",
        "name": "Downlink Message",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "deveui",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"fPort\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "8afd45ce62f6a083"
            ]
        ]
    },
    {
        "id": "d1c5cb831c66ad0b",
        "type": "function",
        "z": "4a78674aaf0fa47e",
        "name": "Multitech Downlink Message Structure",
        "func": "msg.payload = {\n      \"deveui\": msg.deveui,\n      \"port\": msg.payload.fPort,\n      \"data\": msg.payload.bytes,\n}\n\nmsg.topic = \"lora/\" + msg.deveui + \"/down\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 340,
        "wires": [
            [
                "e676ac93271c9c08",
                "30fe8a91713d816c"
            ]
        ]
    },
    {
        "id": "7c2350a005fcb1d6",
        "type": "comment",
        "z": "4a78674aaf0fa47e",
        "name": "Enter the DEV EUI in the \"Downlink Message\" Inject node",
        "info": "",
        "x": 250,
        "y": 280,
        "wires": []
    }
]